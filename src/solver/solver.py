"""
solver.py

–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏ QSAR-–º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:
- –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –Ω—É–ª—è –ø–æ SMILES;
- –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤;
- –ø–æ–¥–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤;
- —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.
"""

import logging
from typing import Optional, Dict

import pandas as pd
from sklearn.model_selection import GridSearchCV

from descriptors.descriptors_api import compute_all_descriptors
from models.regression_model import RegressionModel
from utils.feature_selection import (
    remove_highly_correlated_descriptors,
    select_significant_descriptors,
)
from utils.pipeline_utils import (
    clean_and_align_data,
    scale_features,
    save_model,
)
from visualization.plot_utils import plot_model_performance


def run_qsar_pipeline_from_smiles(
    data: pd.DataFrame,
    descriptors_file_path: str,
    target_column: str,
    model_name: str = "LinearRegression",
    correlation_threshold: float = 0.9,
    scale_data: bool = True,
    plotting_graph: bool = True,
    save_model_path: Optional[str] = None,
    grid_search_params: Optional[Dict] = None,
) -> RegressionModel:
    """
    QSAR-–ø–∞–π–ø–ª–∞–π–Ω —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—á—ë—Ç–æ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –ø–æ SMILES.

    Args:
        data (pd.DataFrame): –î–∞–Ω–Ω—ã–µ —Å –∫–æ–ª–æ–Ω–∫–æ–π SMILES –∏ —Ü–µ–ª–µ–≤—ã–º —Å—Ç–æ–ª–±—Ü–æ–º.
        descriptors_file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤.
        target_column (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞.
        model_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏.
        correlation_threshold (float): –ü–æ—Ä–æ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.
        scale_data (bool): –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏.
        plotting_graph (bool): –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫.
        save_model_path (str, optional): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.
        grid_search_params (dict, optional): –°–µ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞.

    Returns:
        RegressionModel: –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å.
    """
    logging.info("üöÄ –°—Ç–∞—Ä—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞ QSAR –ø–æ SMILES.")
    data_with_descriptors = compute_all_descriptors(data, descriptors_file_path)

    if target_column not in data_with_descriptors.columns:
        raise ValueError(f"–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{target_column}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.")

    x = data_with_descriptors.drop(columns=["SMILES", target_column], errors="ignore")
    y = data_with_descriptors[target_column]

    x, y = clean_and_align_data(x, y)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
    corr_matrix = x.corr().abs()
    x = x[
        remove_highly_correlated_descriptors(
            corr_matrix, threshold=correlation_threshold
        )
    ]

    # –û—Ç–±–æ—Ä –∑–Ω–∞—á–∏–º—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
    x, _ = select_significant_descriptors(x, y)

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    if scale_data:
        x = scale_features(x)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model = RegressionModel()
    model.select_model(model_name)
    model.prepare_data(x, y)

    if grid_search_params:
        best_params = perform_grid_search(model, x, y, grid_search_params)
        print(f"üîß –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_params}")

    model.train()

    metrics = model.evaluate_descriptive_metrics()
    cv = model.cross_validate(x, y)

    print_model_metrics(model_name, metrics, cv)

    if plotting_graph:
        plot_model_performance(
            y_train=model.y_train,
            y_pred_train=model.y_pred_train,
            y_test=model.y_test,
            y_pred_test=model.y_pred_test,
            model_name=model.current_model_name,
            column_name=target_column,
            metrics=model.evaluate_descriptive_metrics(),
        )

    if save_model_path:
        save_model(model, save_model_path)

    return model


def run_qsar_pipeline_from_descriptors(
    file_path: str,
    target_column: str,
    model_name: str = "LinearRegression",
    correlation_threshold: float = 0.9,
    scale_data: bool = True,
    plotting_graph: bool = True,
    save_model_path: Optional[str] = None,
    grid_search_params: Optional[Dict] = None,
) -> RegressionModel:
    """
    QSAR-–ø–∞–π–ø–ª–∞–π–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞—Ä–∞–Ω–µ–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤.

    Args:
        file_path (str): CSV-—Ñ–∞–π–ª —Å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏.
        target_column (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞.
        model_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏.
        correlation_threshold (float): –ü–æ—Ä–æ–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏.
        scale_data (bool): –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏.
        plotting_graph (bool): –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫.
        save_model_path (str, optional): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.
        grid_search_params (dict, optional): –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–±–æ—Ä–∞.

    Returns:
        RegressionModel: –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å.
    """
    data = pd.read_csv(file_path)

    if target_column not in data.columns:
        raise ValueError(f"–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{target_column}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    x = data.drop(columns=["SMILES", target_column], errors="ignore")
    y = data[target_column]

    x, y = clean_and_align_data(x, y)

    x = x[
        remove_highly_correlated_descriptors(
            x.corr().abs(), threshold=correlation_threshold
        )
    ]
    x, _ = select_significant_descriptors(x, y)

    if scale_data:
        x = scale_features(x)

    model = RegressionModel()
    model.select_model(model_name)
    model.prepare_data(x, y)

    if grid_search_params:
        best_params = perform_grid_search(model, x, y, grid_search_params)
        print(f"üîß –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_params}")

    model.train()
    metrics = model.evaluate_descriptive_metrics()
    cv = model.cross_validate(x, y)

    print_model_metrics(model_name, metrics, cv)

    if plotting_graph:
        model.plot_model_performance(column_name=target_column)

    if save_model_path:
        save_model(model, save_model_path)

    return model


def perform_grid_search(
    model: RegressionModel,
    x: pd.DataFrame,
    y: pd.Series,
    param_grid: Dict,
    cv: int = 5,
    scoring: str = "r2",
    n_jobs: int = -1,
) -> Dict:
    """
    –ü–æ–¥–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GridSearchCV.

    Args:
        model (RegressionModel): –û–±—ë—Ä—Ç–∫–∞ –º–æ–¥–µ–ª–∏.
        x (pd.DataFrame): –ü—Ä–∏–∑–Ω–∞–∫–∏.
        y (pd.Series): –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è.
        param_grid (dict): –°–µ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
        cv (int): –ö–æ–ª-–≤–æ —Ñ–æ–ª–¥–æ–≤.
        scoring (str): –ú–µ—Ç—Ä–∏–∫–∞.
        n_jobs (int): –ö–æ–ª-–≤–æ –ø–æ—Ç–æ–∫–æ–≤.

    Returns:
        dict: –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
    """
    if model.current_model is None:
        raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ select_model().")

    logging.info("–ó–∞–ø—É—Å–∫ GridSearchCV –¥–ª—è –º–æ–¥–µ–ª–∏ %s", model.current_model_name)
    grid = GridSearchCV(
        estimator=model.current_model,
        param_grid=param_grid,
        scoring=scoring,
        cv=cv,
        n_jobs=n_jobs,
        verbose=2,
    )
    grid.fit(x, y)

    model.models[model.current_model_name] = grid.best_estimator_
    model.select_model(model.current_model_name)

    return grid.best_params_


def print_model_metrics(model_name: str, metrics: Dict, cv_results: Dict):
    """
    –ü–µ—á–∞—Ç–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.

    Args:
        model_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏.
        metrics (dict): –ú–µ—Ç—Ä–∏–∫–∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
        cv_results (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏.
    """
    print(f"\nüß† –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏: {model_name}")
    print("üìä –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:")
    print(f"R¬≤ = {metrics['R^2']:.4f}")
    print(f"RMSE = {metrics['RMSE']:.4f}")
    print(f"Pearson r = {metrics['Pearson r']:.4f}")
    print(f"Spearman rho = {metrics['Spearman rho']:.4f}")
    print("\nüìà –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:")
    print(f"PRESS = {metrics['PRESS']:.4f}")
    print(f"PRMSE = {metrics['PRMSE']:.4f}")
    print(f"Q¬≤ = {metrics['Q^2']:.4f}")
    print(f"–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è (R¬≤): {cv_results['Mean']:.4f} ¬± {cv_results['Std']:.4f}")
