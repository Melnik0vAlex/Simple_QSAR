"""
solver.py

–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏ QSAR-–º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö,
–≤–∫–ª—é—á–∞—è –ø–æ–¥–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏.
"""

import logging
from typing import Optional, Tuple, Dict
from pathlib import Path
import joblib
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV

from descriptors.descriptors_api import compute_all_descriptors
from models.regressionmodel import RegressionModel
from utils.statfunctions import (
    remove_highly_correlated_descriptors,
    select_significant_descriptors,
)


def run_qsar_pipeline_from_smiles(
    data: pd.DataFrame,
    descriptors_file_path: str,
    target_column: str,
    model_name: str = "LinearRegression",
    correlation_threshold: float = 0.9,
    scale_data: bool = True,
    plotting_graph: bool = True,
    save_model: Optional[str] = None,
    grid_search_params: Optional[Dict] = None,
) -> RegressionModel:
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ QSAR-–º–æ–¥–µ–ª–∏ —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –ø–æ SMILES.

    Args:
        data (pd.DataFrame): –î–∞–Ω–Ω—ã–µ —Å –∫–æ–ª–æ–Ω–∫–æ–π 'SMILES' –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.
        descriptors_file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤.
        target_column (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'pIC50').
        model_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏.
        correlation_threshold (float): –ü–æ—Ä–æ–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏.
        scale_data (bool): –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ.
        plotting_graph (bool): –°—Ç—Ä–æ–∏—Ç—å –ª–∏ –≥—Ä–∞—Ñ–∏–∫.
        save_model (str, optional): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.
        grid_search_params (dict, optional): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

    Returns:
        RegressionModel: –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å.
    """
    logging.info("–ó–∞–ø—É—Å–∫ QSAR-–ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏.")
    data_with_descriptors = compute_all_descriptors(data, descriptors_file_path)

    if target_column not in data_with_descriptors.columns:
        raise ValueError(f"–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{target_column}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.")

    feature_columns = data_with_descriptors.columns.difference(
        ["SMILES", target_column]
    )
    x = data_with_descriptors[feature_columns].apply(pd.to_numeric, errors="coerce")
    y = data_with_descriptors[target_column].dropna()

    x.fillna(x.mean(), inplace=True)
    x, y = x.align(y, join="inner", axis=0)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
    corr_matrix = x.corr().abs()
    selected = remove_highly_correlated_descriptors(
        corr_matrix, threshold=correlation_threshold
    )
    x = x[selected]

    # –û—Ç–±–æ—Ä –∑–Ω–∞—á–∏–º—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
    x, _ = select_significant_descriptors(x, y, alpha=0.05)
    if x.empty:
        raise ValueError("–ü–æ—Å–ª–µ –æ—Ç–±–æ—Ä–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–Ω–∞—á–∏–º—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤.")

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    if scale_data:
        scaler = StandardScaler()
        x = pd.DataFrame(scaler.fit_transform(x), columns=x.columns, index=x.index)

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model = RegressionModel()
    model.select_model(model_name)
    model.prepare_data(x, y)

    if grid_search_params:
        best_params = perform_grid_search(model, x, y, grid_search_params)
        print(f"üèÅ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}: {best_params}")

    model.train()
    metrics = model.evaluate_descriptive_metrics()
    cv = model.cross_validate(x, y)

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\n–ú–æ–¥–µ–ª—å: {model_name}")
    for k, v in metrics.items():
        print(f"{k}: {v:.4f}")
    print(f"–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è (R¬≤): {cv['Mean']:.4f} ¬± {cv['Std']:.4f}")

    if plotting_graph:
        model.plot_model_performance(column_name=target_column)

    if save_model:
        save_path = Path(save_model)
        save_path.parent.mkdir(parents=True, exist_ok=True)
        joblib.dump(model, save_path)
        print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {save_model}")

    return model


def run_qsar_pipeline_from_descriptors(
    file_path: str,
    target_column: str,
    model_name: str = "LinearRegression",
    correlation_threshold: float = 0.9,
    scale_data: bool = True,
    plotting_graph: bool = True,
    save_model: Optional[str] = None,
    grid_search_params: Optional[Dict] = None,
) -> RegressionModel:
    """
    QSAR-–ø–∞–π–ø–ª–∞–π–Ω —Å –∑–∞—Ä–∞–Ω–µ–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏.

    Args:
        file_path (str): –ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É.
        target_column (str): –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è.
        model_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏.
        correlation_threshold (float): –ü–æ—Ä–æ–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏.
        scale_data (bool): –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ.
        plotting_graph (bool): –°—Ç—Ä–æ–∏—Ç—å –ª–∏ –≥—Ä–∞—Ñ–∏–∫.
        save_model (str, optional): –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å.
        grid_search_params (dict, optional): –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã.

    Returns:
        RegressionModel: –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å.
    """
    data = pd.read_csv(file_path)
    if target_column not in data.columns:
        raise ValueError(f"–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{target_column}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    x = data.drop(columns=["SMILES", target_column], errors="ignore")
    y = data[target_column].dropna()
    x = x.apply(pd.to_numeric, errors="coerce")
    x.fillna(x.mean(), inplace=True)
    x, y = x.align(y, axis=0)

    corr_matrix = x.corr().abs()
    selected = remove_highly_correlated_descriptors(
        corr_matrix, threshold=correlation_threshold
    )
    x = x[selected]

    x, _ = select_significant_descriptors(x, y, alpha=0.05)

    if scale_data:
        x = pd.DataFrame(
            StandardScaler().fit_transform(x), columns=x.columns, index=x.index
        )

    model = RegressionModel()
    model.select_model(model_name)
    model.prepare_data(x, y)

    if grid_search_params:
        best_params = perform_grid_search(model, x, y, grid_search_params)
        print(f"üèÅ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}: {best_params}")

    model.train()
    metrics = model.evaluate_descriptive_metrics()
    cv = model.cross_validate(x, y)

    print(f"\n–ú–æ–¥–µ–ª—å: {model_name}")
    for k, v in metrics.items():
        print(f"{k}: {v:.4f}")
    print(f"–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è (R¬≤): {cv['Mean']:.4f} ¬± {cv['Std']:.4f}")

    if plotting_graph:
        model.plot_model_performance(column_name=target_column)

    if save_model:
        save_path = Path(save_model)
        save_path.parent.mkdir(parents=True, exist_ok=True)
        joblib.dump(model, save_path)
        print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {save_model}")

    return model


def perform_grid_search(
    model: RegressionModel,
    x: pd.DataFrame,
    y: pd.Series,
    param_grid: Dict,
    cv: int = 5,
    scoring: str = "r2",
    n_jobs: int = -1,
) -> Dict:
    """
    –ü–æ–¥–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é GridSearchCV.

    Args:
        model (RegressionModel): –û–±—ë—Ä—Ç–∫–∞ –º–æ–¥–µ–ª–∏.
        x (pd.DataFrame): –î–∞–Ω–Ω—ã–µ.
        y (pd.Series): –¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
        param_grid (dict): –°–µ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
        cv (int): –ö–æ–ª-–≤–æ —Ñ–æ–ª–¥–æ–≤.
        scoring (str): –ú–µ—Ç—Ä–∏–∫–∞.
        n_jobs (int): –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.

    Returns:
        dict: –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
    """
    if model.current_model is None:
        raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ select_model().")

    logging.info("–ó–∞–ø—É—Å–∫ GridSearchCV –¥–ª—è –º–æ–¥–µ–ª–∏ %s", model.current_model_name)
    grid = GridSearchCV(
        estimator=model.current_model,
        param_grid=param_grid,
        scoring=scoring,
        cv=cv,
        n_jobs=n_jobs,
        verbose=2,
    )
    grid.fit(x, y)

    model.models[model.current_model_name] = grid.best_estimator_
    model.select_model(model.current_model_name)
    print(f"üèÅ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {grid.best_params_}")
    return grid.best_params_
