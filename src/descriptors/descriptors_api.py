"""
descriptors_api.py

API-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è 1D/2D –∏ 3D –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ (batch –∏ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º).
"""

import logging
import time
from typing import Optional

import pandas as pd
from tqdm import tqdm
from concurrent.futures import ThreadPoolExecutor

from descriptors.descriptors_1d2d import (
    compute_1d_2d_descriptors,
    descriptor_1d_2d_names,
)
from descriptors.descriptors_3d import (
    compute_3d_descriptors,
    descriptor_3d_names,
)


def compute_all_descriptors(
    data: pd.DataFrame,
    file_name: Optional[str] = None,
    smiles_column: str = "SMILES",
    save_to_file: bool = True,
    mode: str = "all",  # 'all', '1d2d', '3d'
) -> pd.DataFrame:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã (1D/2D –∏/–∏–ª–∏ 3D) –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–ª–µ–∫—É–ª—ã –≤ —Ç–∞–±–ª–∏—Ü–µ.

    Args:
        data (pd.DataFrame): –¢–∞–±–ª–∏—Ü–∞ —Å –∫–æ–ª–æ–Ω–∫–æ–π SMILES.
        file_name (str, optional): –ò–º—è CSV-—Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤.
        smiles_column (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å SMILES.
        save_to_file (bool): –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –≤ —Ñ–∞–π–ª.
        mode (str): 'all', '1d2d', –∏–ª–∏ '3d'.

    Returns:
        pd.DataFrame: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ + —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã.
    """
    if smiles_column not in data.columns:
        raise ValueError(f"–ö–æ–ª–æ–Ω–∫–∞ '{smiles_column}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö.")

    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—á—ë—Ç–∞ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤.")
    start_time = time.time()

    # === –í—ã—á–∏—Å–ª–µ–Ω–∏–µ 1D/2D –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ ===
    if mode in ("all", "1d2d"):

        def compute_1d_2d(smiles):
            try:
                return compute_1d_2d_descriptors(smiles)
            except Exception as e:
                logging.error("–û—à–∏–±–∫–∞ 1D/2D-–¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –¥–ª—è %s: %s", smiles, str(e))
                return [None] * len(descriptor_1d_2d_names)

        logging.info("–í—ã—á–∏—Å–ª–µ–Ω–∏–µ 1D/2D –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤...")
        with ThreadPoolExecutor() as executor:
            descriptor_1d_2d = list(
                tqdm(
                    executor.map(compute_1d_2d, data[smiles_column]),
                    desc="1D/2D –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã",
                    total=len(data),
                    unit=" molecule",
                    bar_format="{l_bar} {bar} {n_fmt}/{total_fmt}",
                )
            )
        descriptors_1d_2d_df = pd.DataFrame(
            descriptor_1d_2d, columns=descriptor_1d_2d_names
        )
    else:
        descriptors_1d_2d_df = pd.DataFrame()

    # === –í—ã—á–∏—Å–ª–µ–Ω–∏–µ 3D –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ ===
    if mode in ("all", "3d"):

        def compute_3d(smiles):
            try:
                return compute_3d_descriptors(smiles)
            except Exception as e:
                logging.error("–û—à–∏–±–∫–∞ 3D-–¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –¥–ª—è %s: %s", smiles, str(e))
                failed_smiles.append(smiles)
                return [None] * len(descriptor_3d_names)

        failed_smiles = []
        logging.info("üß± –í—ã—á–∏—Å–ª–µ–Ω–∏–µ 3D –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤...")
        with ThreadPoolExecutor() as executor:
            descriptor_3d = list(
                tqdm(
                    executor.map(compute_3d, data[smiles_column]),
                    desc="3D –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã",
                    total=len(data),
                    unit=" molecule",
                    bar_format="{l_bar} {bar} {n_fmt}/{total_fmt}",
                )
            )
        descriptors_3d_df = pd.DataFrame(descriptor_3d, columns=descriptor_3d_names)
    else:
        descriptors_3d_df = pd.DataFrame()

    # === –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ===
    combined = pd.concat(
        [data.reset_index(drop=True), descriptors_1d_2d_df, descriptors_3d_df], axis=1
    )

    # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ===
    if save_to_file and file_name:
        combined.to_csv(file_name, index=False)
        logging.info("üìÅ –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: %s", file_name)

    # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ ===
    if mode in ("all", "3d") and "failed_smiles" in locals() and failed_smiles:
        with open("logs/failed_smiles.txt", "w", encoding="utf-8") as f:
            f.write("\n".join(failed_smiles))
        logging.warning(
            "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å 3D-–¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –¥–ª—è %d –º–æ–ª–µ–∫—É–ª.",
            len(failed_smiles),
        )

    # === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
    elapsed = time.time() - start_time
    logging.info("‚úÖ –†–∞—Å—á—ë—Ç –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ %.2f —Å–µ–∫—É–Ω–¥.", elapsed)
    return combined


def compute_descriptors_for_smiles(smiles: str, mode: str = "all") -> pd.DataFrame:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ SMILES (1D/2D –∏/–∏–ª–∏ 3D).

    Args:
        smiles (str): –°—Ç—Ä–æ–∫–∞ SMILES.
        mode (str): 'all', '1d2d', –∏–ª–∏ '3d'.

    Returns:
        pd.DataFrame: –°—Ç—Ä–æ–∫–∞ —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏.
    """
    data = pd.DataFrame({"SMILES": [smiles]})
    result = compute_all_descriptors(
        data, file_name=None, save_to_file=False, mode=mode
    )
    return result.iloc[[0]]
